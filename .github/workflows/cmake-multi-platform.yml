name: CMake on multiple platforms  

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:   
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true
          path: ''

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Update packages
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get upgrade

      - name: Install packages
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install --fix-missing libgl1-mesa-dev mesa-utils mesa-common-dev

      - name : Install Windows SDK
        if: matrix.os == 'windows-latest'
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 22621

      - name: Setup vcpkg
        uses: microsoft/vcpkg-action@v1
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgTriplet: 'x64-windows-static'

      - name: Install DirectX 12 Agility SDK
        run: |
          vcpkg install directx12-agility
    
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang
          vulkan-use-cache: true

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.10.0

      - name: Setup MSVC on Windows
        if: matrix.os == 'windows-latest'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
          
      - name: actions-setup-cmake
        uses: jwlawson/actions-setup-cmake@v2.0.2

      - name: Configure CMake Clang
        if: matrix.c_compiler == 'clang'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_LINKER_FLAGS="-fuse-ld=lld"
          -DCMAKE_C_LINKER_FLAGS="-fuse-ld=lld"
          -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"
          -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld"
          -DNX_PLATFORM_OPENGL=1
          -DNX_PLATFORM_VULKAN=1
          -DNX_PLATFORM_OPENAL=1
          -S ${{ github.workspace }}

      - name: Configure CMake GCC
        if: matrix.c_compiler == 'gcc'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DNX_PLATFORM_OPENGL=1
          -DNX_PLATFORM_VULKAN=1
          -DNX_PLATFORM_OPENAL=1
          -S ${{ github.workspace }}

      - name: Configure CMake MSVC
        if: matrix.c_compiler == 'cl'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir}}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler}}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DNX_PLATFORM_OPENGL=1
          -DNX_PLATFORM_VULKAN=1
          -DNX_PLATFORM_D3D12=1
          -DNX_PLATFORM_OPENAL=1
          -S ${{ github.workspace }}         


      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }} --test-dir ${{ steps.strings.outputs.build-output-dir }}
