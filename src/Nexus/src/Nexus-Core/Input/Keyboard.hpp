#pragma once

#include "Nexus-Core/Utils/Utils.hpp"
#include "Nexus-Core/nxpch.hpp"

namespace Nexus
{
	/// @brief An enum representing the character pressed on the keyboard
	enum class KeyCode
	{
		Return,
		Escape,
		Backspace,
		Tab,
		Space,
		Exclaim,
		QuoteDBL,
		Hash,
		Percent,
		Dollar,
		Ampersand,
		Quote,
		LeftParenthesis,
		RightParenthesis,
		Asterisk,
		Plus,
		Comma,
		Minus,
		Period,
		Slash,
		Zero,
		One,
		Two,
		Three,
		Four,
		Five,
		Six,
		Seven,
		Eight,
		Nine,
		Colon,
		Semicolon,
		Less,
		Equals,
		Greater,
		Question,
		At,

		LeftBracket,
		BackSlash,
		RightBracket,
		Caret,
		Underscore,
		BackQuote,
		A,
		B,
		C,
		D,
		E,
		F,
		G,
		H,
		I,
		J,
		K,
		L,
		M,
		N,
		O,
		P,
		Q,
		R,
		S,
		T,
		U,
		V,
		W,
		X,
		Y,
		Z,

		CapsLock,

		F1,
		F2,
		F3,
		F4,
		F5,
		F6,
		F7,
		F8,
		F9,
		F10,
		F11,
		F12,

		PrintScreen,
		ScrollLock,
		Pause,
		Insert,
		Home,
		PageUp,
		Delete,
		End,
		PageDown,
		Right,
		Left,
		Down,
		Up,

		NumLockClear,
		KeyPad_Divide,
		KeyPad_Multiply,
		KeyPad_Minus,
		KeyPad_Plus,
		KeyPad_Enter,
		KeyPad_One,
		KeyPad_Two,
		KeyPad_Three,
		KeyPad_Four,
		KeyPad_Five,
		KeyPad_Six,
		KeyPad_Seven,
		KeyPad_Eight,
		KeyPad_Nine,
		KeyPad_Zero,
		KeyPad_Period,

		Application,
		Power,
		KeyPad_Equals,
		F13,
		F14,
		F15,
		F16,
		F17,
		F18,
		F19,
		F20,
		F21,
		F22,
		F23,
		F24,
		Execute,
		Help,
		Menu,
		Select,
		Stop,
		Again,
		Undo,
		Cut,
		Copy,
		Paste,
		Find,
		Mute,
		VolumeUp,
		VolumeDown,
		KeyPad_Comma,
		Keypad_EqualsAs400,

		AltErase,
		SysReq,
		Cancel,
		Clear,
		Prior,
		Return2,
		Separator,
		Out,
		Oper,
		ClearAgain,
		CRSEL,
		EXSEL,

		KeyPad_00,
		KeyPad_000,
		ThounsandsSeparator,

		DecimalSeparator,
		CurrencyUnit,
		CurrencySubUnit,
		KeyPad_LeftParenthesis,
		KeyPad_RightParenthesis,
		KeyPad_LeftBrace,
		KeyPad_RightBrace,
		KeyPad_Tab,
		KeyPad_Backspace,
		KeyPad_A,
		KeyPad_B,
		KeyPad_C,
		KeyPad_D,
		KeyPad_E,
		KeyPad_F,
		KeyPad_XOR,
		KeyPad_Power,
		KeyPad_Percent,
		KeyPad_Less,
		KeyPad_Greater,
		KeyPad_Ampersand,
		Keypad_DBLAmpersand,
		KeyPad_VerticalBar,
		Keypad_DBLVerticalBar,
		Keypad_Colon,
		Keypad_Hash,
		Keypad_Space,
		Keypad_At,
		Keypad_Exclam,
		Keypad_MemStore,
		Keypad_MemRecall,
		Keypad_MemClear,
		Keypad_MemAdd,
		Keypad_MemSubtract,
		Keypad_MemMultiply,
		Keypad_MemDivide,
		Keypad_PlusMinus,
		KeyPad_Clear,
		KeyPad_ClearEntry,
		KeyPad_Binary,
		Keypad_Octal,
		Keypad_Decimal,
		Keypad_Hexidecimal,

		LeftControl,
		LeftShift,
		LeftAlt,
		LeftGUI,
		RightControl,
		RightShift,
		RightAlt,
		RightGUI,

		Mode,

		AudioNext,
		AudioPrevious,
		AudioStop,
		AudioPlay,
		AudioMute,
		MediaSelect,
		WWW,
		Mail,
		Calculator,
		Computer,
		AC_Search,
		AC_Home,
		AC_Back,
		AC_Forward,
		AC_Stop,
		AC_Refresh,
		AC_Bookmarks,

		BrightnessDown,
		BrightnessUp,
		DisplaySwitch,
		DillumToggle,
		DillumDown,
		DillumUp,
		Eject,
		Sleep,
		App1,
		APpp2,

		AudioRewind,
		AudioFastForward,

		SoftLeft,
		SoftRight,
		Call,
		EndCall
	};

	/// @brief An enum class representing the position of the key on the keyboard
	enum class ScanCode
	{
		A,
		B,
		C,
		D,
		E,
		F,
		G,
		H,
		I,
		J,
		K,
		L,
		M,
		N,
		O,
		P,
		Q,
		R,
		S,
		T,
		U,
		V,
		W,
		X,
		Y,
		Z,

		One,
		Two,
		Three,
		Four,
		Five,
		Six,
		Seven,
		Eight,
		Nine,
		Zero,

		Return,
		Escape,
		Backspace,
		Tab,
		Space,

		Minus,
		Equals,
		LeftBracket,
		RightBracket,
		Backslash,
		NonusHash,
		Semicolon,
		Apostrophe,
		Grave,

		Comma,
		Period,
		Slash,

		CapsLock,

		F1,
		F2,
		F3,
		F4,
		F5,
		F6,
		F7,
		F8,
		F9,
		F10,
		F11,
		F12,

		PrintScreen,
		ScrollLock,
		Pause,
		Insert,

		Home,
		PageUp,
		Delete,
		End,
		PageDown,
		Right,
		Left,
		Down,
		Up,

		NumLockClear,
		KeyPad_Divide,
		KeyPad_Multiply,
		KeyPad_Minus,
		KeyPad_Plus,
		KeyPad_Enter,
		KeyPad_One,
		KeyPad_Two,
		KeyPad_Three,
		KeyPad_Four,
		KeyPad_Five,
		KeyPad_Six,
		KeyPad_Seven,
		KeyPad_Eight,
		KeyPad_Nine,
		KeyPad_Zero,
		KeyPad_Period,

		NonusBackslash,
		Application,
		Power,

		KeyPad_Equals,
		F13,
		F14,
		F15,
		F16,
		F17,
		F18,
		F19,
		F20,
		F21,
		F22,
		F23,
		F24,
		Execute,
		Help,
		Menu,
		Select,
		Stop,
		Again,
		Undo,
		Cut,
		Copy,
		Paste,
		Find,
		Mute,
		VolumeUp,
		VolumeDown,

		KeyPad_Comma,
		KeyPad_EqualsAS400,

		International1,
		International2,
		International3,
		International4,
		International5,
		International6,
		International7,
		International8,
		International9,
		Lang1,
		Lang2,
		Lang3,
		Lang4,
		Lang5,
		Lang6,
		Lang7,
		Lang8,
		Lang9,

		AltErase,
		SysReq,
		Cancel,
		Clear,
		Prior,
		Return2,
		Separator,
		Out,
		Oper,
		ClearAgain,
		Crsel,
		Exsel,

		KeyPad_00,
		KeyPad_000,
		ThousandsSeparator,
		DecimalSeparator,
		CurrencyUnit,
		CurrencySubUnit,
		KeyPad_LeftParenthesis,
		KeyPad_RightParenthesis,
		KeyPad_LeftBrace,
		KeyPad_RightBrace,
		KeyPad_Tab,
		KeyPad_Backspace,
		KeyPad_A,
		KeyPad_B,
		KeyPad_C,
		KeyPad_D,
		KeyPad_E,
		KeyPad_F,
		KeyPad_XOR,
		KeyPad_Power,
		KeyPad_Percent,
		KeyPad_Less,
		KeyPad_Greater,
		KeyPad_Ampersand,
		KeyPad_DBLAmpersand,
		KeyPad_VerticalBar,
		KeyPad_DBLVerticalBar,
		KeyPad_Colon,
		KeyPad_Hash,
		KeyPad_Space,
		KeyPad_At,
		KeyPad_Exclam,
		KeyPad_MemStore,
		KeyPad_MemRecall,
		KeyPad_MemClear,
		KeyPad_MemAdd,
		KeyPad_MemSubtract,
		KeyPad_MemMultiply,
		KeyPad_MemDivide,
		KeyPad_PlusMinus,
		KeyPad_Clear,
		KeyPad_ClearEntry,
		KeyPad_Binary,
		KeyPad_Octal,
		KeyPad_Decimal,
		KeyPad_Hexadecimal,

		LeftControl,
		LeftShift,
		LeftAlt,
		LeftGUI,
		RightControl,
		RightShift,
		RightAlt,
		RightGUI,

		Mode,

		AudioNext,
		AudioPrevious,
		AudioStop,
		AudioPlay,
		AudioMute,
		MediaSelect,
		WWW,
		Mail,
		Calculator,
		Computer,
		AC_Search,
		AC_Home,
		AC_Back,
		AC_Forward,
		AC_Stop,
		AC_Refresh,
		AC_Bookmarks,

		BrightnessDown,
		BrightnessUp,
		DisplaySwitch,

		DillumToggle,
		DillumDown,
		DillumUp,
		Eject,
		Sleep,

		App1,
		App2,

		AudioRewind,
		AudioFastForward,

		SoftLeft,
		SoftRight,

		Call,
		EndCall
	};

	/// @brief A class containing the current state of a set of keys
	class Keyboard
	{
	  public:
		enum Modifier
		{
			None		 = 0,
			LeftShift	 = BIT(1),
			RightShift	 = BIT(2),
			LeftControl	 = BIT(3),
			RightControl = BIT(4),
			LeftAlt		 = BIT(5),
			RightAlt	 = BIT(6),
			LeftGUI		 = BIT(7),
			RightGUI	 = BIT(8),
			Num			 = BIT(9),
			Caps		 = BIT(10),
			Mode		 = BIT(11),
			Scroll		 = BIT(12),
			Control		 = BIT(13),
			Shift		 = BIT(14),
			Alt			 = BIT(15),
			GUI			 = BIT(16)
		};

		using Modifiers = uint16_t;

	  public:
		/// @brief A method that caches the previous frames key states
		void CacheInput();

		/// @brief A method that checks whether a key is currently held
		/// @param code The keycode to check the state of
		/// @return A boolean value representing whether a key was held
		const bool IsKeyHeld(KeyCode code) const;

		/// @brief A method that checks whether a key is currently pressed
		/// @param code The keycode to check the state of
		/// @return A boolean value representing whether a key was pressed
		const bool WasKeyPressed(KeyCode code) const;

		/// @brief A method that checks whether a key is currently released
		/// @param code The keycode to check the state of
		/// @return A boolean value representing whether a key was released
		const bool WasKeyReleased(KeyCode code) const;

		const std::map<KeyCode, bool> &GetKeys() const;

	  private:
		/// @brief A map containing the current state of the keyboard's keys
		mutable std::map<KeyCode, bool> m_CurrentKeys;

		/// @brief A map containing the state of the keyboard's keys in the previous
		/// frame
		mutable std::map<KeyCode, bool> m_PreviousKeys;

		/// @brief A friend class to allow a window to access the private properties
		/// of this class
		friend class Window;

		friend class Application;
	};
}	 // namespace Nexus